// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/31/2022 10:09:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          leitorPS2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module leitorPS2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_ps2;
reg data;
// wires                                               
wire [7:0] count;
wire end_scan;
wire [7:0] scan_code;

// assign statements (if any)                          
leitorPS2 i1 (
// port map - connection between master ports and signals/registers   
	.clk_ps2(clk_ps2),
	.count(count),
	.data(data),
	.end_scan(end_scan),
	.scan_code(scan_code)
);
initial 
begin 
#660000 $finish;
end 

// clk_ps2
initial
begin
	clk_ps2 = 1'b1;
	clk_ps2 = #10000 1'b0;
	# 10000;
	repeat(31)
	begin
		clk_ps2 = 1'b1;
		clk_ps2 = #10000 1'b0;
		# 10000;
	end
	clk_ps2 = 1'b1;
	clk_ps2 = #10000 1'b0;
end 

// data
initial
begin
	data = 1'b1;
	data = #230000 1'b0;
	data = #230000 1'b1;
end 
endmodule

